============================================================
How docker is used in this project

The docker workflow consist of :
- start a container indefinitely with docker-compose (the container is named "solar_concentrator-dev-1")
- execute commands in the existing container

This workflow avoids the slow up/down of container for every single command and save some time and focus for the development perspective.

It's a little bit different from the classical docker worflow (define command in docker-compose and launch them all with docker compose up).

It also allows to test third party tools directly in the container without rebuilding the image.

============================================================
Usefull commands from host

cd ~/Documents/Projets/solar_concentrator/docker/
./docker_build_image   # first time or if Dockerfile has changed
./docker_up            # start the container indefinitely (without usb)
./docker_up_with_usb   # start the container indefinitely (with usb)
./docker_connect       # connect the container to internet (initially disconnected)
./docker_disconnect    # disconnect the container from internet
./docker_down          # stop the container
./docker_ls            # list images and running containers
./docker_bash          # open a bash session in the running container
./docker_kdevelop      # launch kdevelop
./give_my_files        # set current user the owner of all files in the project

============================================================
Usefull commands from container to build and run tests

# Configure cmake (done once)
cd /solar_concentrator/software/supervisor_controller
mkdir build_tests
cd build_tests
cmake -DTESTS_ON_HOST=1 -DCMAKE_BUILD_TYPE:STRING=DEBUG ..

# Build and run tests
cd /solar_concentrator/software/supervisor_controller/build_tests
ninja                 # build all tests
ctest                 # run all tests
ctest -V              # run tests verbose
ctest -V -R "token"   # run tests with token
ctest -V -R "^prefix"
ctest -V -R "suffix$"

============================================================
Usefull commands from container to build and run production on esp32

# Configure cmake (done once)
/solar_concentrator/software/supervisor_controller/esp32_configure_cmake

# Eventually configure application
/solar_concentrator/software/supervisor_controller/esp32_menuconfig

# Build production
/solar_concentrator/software/supervisor_controller/esp32_build_all

# Upload production
# - connect IO0 to GND
# - reboot device
/solar_concentrator/software/supervisor_controller/esp32_flash_usb

# Monitor the communication with esp32 (container must have been started with usb mapping)
minicom -D /dev/ttyUSB0 -b 115200 -c on

